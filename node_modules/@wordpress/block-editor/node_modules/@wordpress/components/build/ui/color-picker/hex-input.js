"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HexInput = void 0;

var _element = require("@wordpress/element");

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _i18n = require("@wordpress/i18n");

var _text = require("../../text");

var _spacer = require("../../spacer");

var _inputControl = _interopRequireDefault(require("../../input-control"));

var _space = require("../utils/space");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const HexInput = ({
  color,
  onChange,
  enableAlpha
}) => {
  const handleValidate = value => {
    if (!(0, _tinycolor.default)(value).isValid()) {
      throw new Error('Invalid hex color input');
    }
  };

  const colorized = (0, _tinycolor.default)(color);
  const value = enableAlpha ? colorized.toHex8String() : colorized.toHexString();
  return (0, _element.createElement)(_inputControl.default, {
    __unstableInputWidth: "8em",
    prefix: (0, _element.createElement)(_spacer.Spacer, {
      as: _text.Text,
      marginLeft: (0, _space.space)(2),
      color: "blue"
    }, "#"),
    value: value.slice(1).toUpperCase(),
    onChange: nextValue => onChange((0, _tinycolor.default)(nextValue).toHsl()),
    onValidate: handleValidate,
    maxLength: enableAlpha ? 8 : 6,
    label: (0, _i18n.__)('Hex color'),
    hideLabelFromVision: true
  });
};

exports.HexInput = HexInput;
//# sourceMappingURL=hex-input.js.map