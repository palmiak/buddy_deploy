"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useToolsPanel = useToolsPanel;

var _element = require("@wordpress/element");

var styles = _interopRequireWildcard(require("../styles"));

var _context = require("../../ui/context");

var _useCx = require("../../utils/hooks/use-cx");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useToolsPanel(props) {
  const {
    className,
    resetAll,
    ...otherProps
  } = (0, _context.useContextSystem)(props, 'ToolsPanel');
  const cx = (0, _useCx.useCx)();
  const classes = (0, _element.useMemo)(() => {
    return cx(styles.ToolsPanel, className);
  }, [className]); // Allow panel items to register themselves.

  const [panelItems, setPanelItems] = (0, _element.useState)([]);

  const registerPanelItem = item => {
    setPanelItems(items => [...items, item]);
  }; // Manage and share display state of menu items representing child controls.


  const [menuItems, setMenuItems] = (0, _element.useState)({}); // Setup menuItems state as panel items register themselves.

  (0, _element.useEffect)(() => {
    const items = {};
    panelItems.forEach(({
      hasValue,
      isShownByDefault,
      label
    }) => {
      items[label] = isShownByDefault || hasValue();
    });
    setMenuItems(items);
  }, [panelItems]); // Toggle the checked state of a menu item which is then used to determine
  // display of the item within the panel.

  const toggleItem = label => {
    setMenuItems({ ...menuItems,
      [label]: !menuItems[label]
    });
  }; // Resets display of children and executes resetAll callback if available.


  const resetAllItems = () => {
    if (typeof resetAll === 'function') {
      resetAll();
    } // Turn off display of all non-default items.


    const resetMenuItems = {};
    panelItems.forEach(({
      label,
      isShownByDefault
    }) => {
      resetMenuItems[label] = !!isShownByDefault;
    });
    setMenuItems(resetMenuItems);
  };

  const panelContext = {
    menuItems,
    registerPanelItem
  };
  return { ...otherProps,
    panelContext,
    resetAllItems,
    toggleItem,
    className: classes
  };
}
//# sourceMappingURL=hook.js.map