{"version":3,"sources":["@wordpress/components/src/tools-panel/tools-panel-item/hook.js"],"names":["useToolsPanelItem","props","className","hasValue","isShownByDefault","label","onDeselect","undefined","onSelect","otherProps","cx","classes","styles","ToolsPanelItem","menuItems","registerPanelItem","isValueSet","isMenuItemChecked","wasMenuItemChecked","isShown"],"mappings":";;;;;;;;;AAGA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AAZA;AACA;AACA;;AAIA;AACA;AACA;AAMO,SAASA,iBAAT,CAA4BC,KAA5B,EAAoC;AAC1C,QAAM;AACLC,IAAAA,SADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,gBAHK;AAILC,IAAAA,KAJK;AAKLC,IAAAA,UAAU,GAAG,MAAMC,SALd;AAMLC,IAAAA,QAAQ,GAAG,MAAMD,SANZ;AAOL,OAAGE;AAPE,MAQF,gCAAkBR,KAAlB,EAAyB,gBAAzB,CARJ;AAUA,QAAMS,EAAE,GAAG,mBAAX;AACA,QAAMC,OAAO,GAAG,sBAAS,MAAM;AAC9B,WAAOD,EAAE,CAAEE,MAAM,CAACC,cAAT,EAAyBX,SAAzB,CAAT;AACA,GAFe,CAAhB;AAIA,QAAM;AAAEY,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAmC,oCAAzC,CAhB0C,CAkB1C;AACA;;AACA,0BAAW,MAAM;AAChBA,IAAAA,iBAAiB,CAAE;AAClBZ,MAAAA,QADkB;AAElBC,MAAAA,gBAFkB;AAGlBC,MAAAA;AAHkB,KAAF,CAAjB;AAKA,GAND,EAMG,EANH;AAQA,QAAMW,UAAU,GAAGb,QAAQ,EAA3B,CA5B0C,CA8B1C;AACA;;AACA,QAAMc,iBAAiB,GAAGH,SAAS,CAAET,KAAF,CAAnC;AACA,QAAMa,kBAAkB,GAAG,0BAAaD,iBAAb,CAA3B,CAjC0C,CAmC1C;AACA;;AACA,0BAAW,MAAM;AAChB,QAAKA,iBAAiB,IAAI,CAAED,UAAvB,IAAqC,CAAEE,kBAA5C,EAAiE;AAChEV,MAAAA,QAAQ;AACR;;AAED,QAAK,CAAES,iBAAF,IAAuBC,kBAA5B,EAAiD;AAChDZ,MAAAA,UAAU;AACV;AACD,GARD,EAQG,CAAEW,iBAAF,EAAqBC,kBAArB,EAAyCF,UAAzC,CARH;AAUA,SAAO,EACN,GAAGP,UADG;AAENU,IAAAA,OAAO,EAAEF,iBAFH;AAGNf,IAAAA,SAAS,EAAES;AAHL,GAAP;AAKA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { usePrevious } from '@wordpress/compose';\nimport { useEffect, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport * as styles from '../styles';\nimport { useToolsPanelContext } from '../context';\nimport { useContextSystem } from '../../ui/context';\nimport { useCx } from '../../utils/hooks/use-cx';\n\nexport function useToolsPanelItem( props ) {\n\tconst {\n\t\tclassName,\n\t\thasValue,\n\t\tisShownByDefault,\n\t\tlabel,\n\t\tonDeselect = () => undefined,\n\t\tonSelect = () => undefined,\n\t\t...otherProps\n\t} = useContextSystem( props, 'ToolsPanelItem' );\n\n\tconst cx = useCx();\n\tconst classes = useMemo( () => {\n\t\treturn cx( styles.ToolsPanelItem, className );\n\t} );\n\n\tconst { menuItems, registerPanelItem } = useToolsPanelContext();\n\n\t// Registering the panel item allows the panel to include it in its\n\t// automatically generated menu and determine its initial checked status.\n\tuseEffect( () => {\n\t\tregisterPanelItem( {\n\t\t\thasValue,\n\t\t\tisShownByDefault,\n\t\t\tlabel,\n\t\t} );\n\t}, [] );\n\n\tconst isValueSet = hasValue();\n\n\t// Note: `label` is used as a key when building menu item state in\n\t// `ToolsPanel`.\n\tconst isMenuItemChecked = menuItems[ label ];\n\tconst wasMenuItemChecked = usePrevious( isMenuItemChecked );\n\n\t// Determine if the panel item's corresponding menu is being toggled and\n\t// trigger appropriate callback if it is.\n\tuseEffect( () => {\n\t\tif ( isMenuItemChecked && ! isValueSet && ! wasMenuItemChecked ) {\n\t\t\tonSelect();\n\t\t}\n\n\t\tif ( ! isMenuItemChecked && wasMenuItemChecked ) {\n\t\t\tonDeselect();\n\t\t}\n\t}, [ isMenuItemChecked, wasMenuItemChecked, isValueSet ] );\n\n\treturn {\n\t\t...otherProps,\n\t\tisShown: isMenuItemChecked,\n\t\tclassName: classes,\n\t};\n}\n"]}