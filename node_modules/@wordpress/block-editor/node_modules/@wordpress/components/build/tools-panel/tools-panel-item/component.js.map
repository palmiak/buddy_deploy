{"version":3,"sources":["@wordpress/components/src/tools-panel/tools-panel-item/component.js"],"names":["ToolsPanelItem","props","forwardedRef","children","isShown","toolsPanelItemProps","ConnectedToolsPanelItem"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AACA;;AALA;AACA;AACA;AAKA;AACA;AACA,MAAMA,cAAc,GAAG,CAAEC,KAAF,EAASC,YAAT,KAA2B;AACjD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqB,OAAGC;AAAxB,MAAgD,6BACrDJ,KADqD,CAAtD;;AAIA,MAAK,CAAEG,OAAP,EAAiB;AAChB,WAAO,IAAP;AACA;;AAED,SACC,4BAAC,UAAD,6BAAWC,mBAAX;AAAiC,IAAA,GAAG,EAAGH;AAAvC,MACGC,QADH,CADD;AAKA,CAdD;;AAgBA,MAAMG,uBAAuB,GAAG,6BAC/BN,cAD+B,EAE/B,gBAF+B,CAAhC;eAKeM,uB","sourcesContent":["/**\n * Internal dependencies\n */\nimport { useToolsPanelItem } from './hook';\nimport { View } from '../../view';\nimport { contextConnect } from '../../ui/context';\n\n// This wraps controls to be conditionally displayed within a tools panel. It\n// prevents props being applied to HTML elements that would make them invalid.\nconst ToolsPanelItem = ( props, forwardedRef ) => {\n\tconst { children, isShown, ...toolsPanelItemProps } = useToolsPanelItem(\n\t\tprops\n\t);\n\n\tif ( ! isShown ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<View { ...toolsPanelItemProps } ref={ forwardedRef }>\n\t\t\t{ children }\n\t\t</View>\n\t);\n};\n\nconst ConnectedToolsPanelItem = contextConnect(\n\tToolsPanelItem,\n\t'ToolsPanelItem'\n);\n\nexport default ConnectedToolsPanelItem;\n"]}