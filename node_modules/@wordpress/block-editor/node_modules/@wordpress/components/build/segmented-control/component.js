"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reakit = require("reakit");

var _reactResizeAware = _interopRequireDefault(require("react-resize-aware"));

var _compose = require("@wordpress/compose");

var _context = require("../ui/context");

var _view = require("../view");

var styles = _interopRequireWildcard(require("./styles"));

var _hooks = require("../utils/hooks");

var _segmentedControlBackdrop = _interopRequireDefault(require("./segmented-control-backdrop"));

var _segmentedControlContext = _interopRequireDefault(require("./segmented-control-context"));

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * Internal dependencies
 */
const noop = () => {};

function SegmentedControl(props, forwardedRef) {
  const {
    className,
    baseId,
    isAdaptiveWidth = false,
    isBlock = false,
    id,
    label,
    onChange = noop,
    value,
    children,
    ...otherProps
  } = (0, _context.useContextSystem)(props, 'SegmentedControl');
  const cx = (0, _hooks.useCx)();
  const containerRef = (0, _element.useRef)();
  const [resizeListener, sizes] = (0, _reactResizeAware.default)();
  const radio = (0, _reakit.useRadioState)({
    baseId: baseId || id,
    state: value
  }); // Propagate radio.state change

  (0, _hooks.useUpdateEffect)(() => {
    onChange(radio.state);
  }, [radio.state]); // Sync incoming value with radio.state

  (0, _hooks.useUpdateEffect)(() => {
    if (value !== radio.state) {
      radio.setState(value);
    }
  }, [value]);
  const classes = (0, _element.useMemo)(() => cx(styles.SegmentedControl, isBlock && styles.block, 'medium', className), [className]);
  return (0, _element.createElement)(_segmentedControlContext.default.Provider, {
    value: { ...radio,
      isBlock: !isAdaptiveWidth
    }
  }, (0, _element.createElement)(_reakit.RadioGroup, (0, _extends2.default)({}, radio, {
    "aria-label": label,
    as: _view.View,
    className: classes
  }, otherProps, {
    ref: (0, _compose.useMergeRefs)([containerRef, forwardedRef])
  }), resizeListener, (0, _element.createElement)(_segmentedControlBackdrop.default, (0, _extends2.default)({}, radio, {
    containerRef: containerRef,
    containerWidth: sizes.width
  })), children));
}

var _default = (0, _context.contextConnect)(SegmentedControl, 'SegmentedControl');

exports.default = _default;
//# sourceMappingURL=component.js.map