{"version":3,"sources":["@wordpress/components/src/segmented-control/component.tsx"],"names":["RadioGroup","useRadioState","useResizeAware","useRef","useMemo","useMergeRefs","contextConnect","useContextSystem","View","styles","useUpdateEffect","useCx","Backdrop","SegmentedControlContext","noop","SegmentedControl","props","forwardedRef","className","baseId","isAdaptiveWidth","isBlock","id","label","onChange","value","children","otherProps","cx","containerRef","resizeListener","sizes","radio","state","setState","classes","block","width"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,aAArB,QAA0C,QAA1C;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AAEA;AACA;AACA;;AAEA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,oBAAhC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;;AACA,SACCC,cADD,EAECC,gBAFD,QAIO,eAJP;AAKA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,SAASC,eAAT,EAA0BC,KAA1B,QAAuC,gBAAvC;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,OAAOC,uBAAP,MAAoC,6BAApC;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,SAASC,gBAAT,CACCC,KADD,EAECC,YAFD,EAGE;AACD,QAAM;AACLC,IAAAA,SADK;AAELC,IAAAA,MAFK;AAGLC,IAAAA,eAAe,GAAG,KAHb;AAILC,IAAAA,OAAO,GAAG,KAJL;AAKLC,IAAAA,EALK;AAMLC,IAAAA,KANK;AAOLC,IAAAA,QAAQ,GAAGV,IAPN;AAQLW,IAAAA,KARK;AASLC,IAAAA,QATK;AAUL,OAAGC;AAVE,MAWFpB,gBAAgB,CAAES,KAAF,EAAS,kBAAT,CAXpB;AAYA,QAAMY,EAAE,GAAGjB,KAAK,EAAhB;AACA,QAAMkB,YAAY,GAAG1B,MAAM,EAA3B;AACA,QAAM,CAAE2B,cAAF,EAAkBC,KAAlB,IAA4B7B,cAAc,EAAhD;AAEA,QAAM8B,KAAK,GAAG/B,aAAa,CAAE;AAC5BkB,IAAAA,MAAM,EAAEA,MAAM,IAAIG,EADU;AAE5BW,IAAAA,KAAK,EAAER;AAFqB,GAAF,CAA3B,CAjBC,CAsBD;;AACAf,EAAAA,eAAe,CAAE,MAAM;AACtBc,IAAAA,QAAQ,CAAEQ,KAAK,CAACC,KAAR,CAAR;AACA,GAFc,EAEZ,CAAED,KAAK,CAACC,KAAR,CAFY,CAAf,CAvBC,CA2BD;;AACAvB,EAAAA,eAAe,CAAE,MAAM;AACtB,QAAKe,KAAK,KAAKO,KAAK,CAACC,KAArB,EAA6B;AAC5BD,MAAAA,KAAK,CAACE,QAAN,CAAgBT,KAAhB;AACA;AACD,GAJc,EAIZ,CAAEA,KAAF,CAJY,CAAf;AAMA,QAAMU,OAAO,GAAG/B,OAAO,CACtB,MACCwB,EAAE,CACDnB,MAAM,CAACM,gBADN,EAEDM,OAAO,IAAIZ,MAAM,CAAC2B,KAFjB,EAGD,QAHC,EAIDlB,SAJC,CAFmB,EAQtB,CAAEA,SAAF,CARsB,CAAvB;AAUA,SACC,cAAC,uBAAD,CAAyB,QAAzB;AACC,IAAA,KAAK,EAAG,EAAE,GAAGc,KAAL;AAAYX,MAAAA,OAAO,EAAE,CAAED;AAAvB;AADT,KAGC,cAAC,UAAD,eACMY,KADN;AAEC,kBAAaT,KAFd;AAGC,IAAA,EAAE,EAAGf,IAHN;AAIC,IAAA,SAAS,EAAG2B;AAJb,KAKMR,UALN;AAMC,IAAA,GAAG,EAAGtB,YAAY,CAAE,CAAEwB,YAAF,EAAgBZ,YAAhB,CAAF;AANnB,MAQGa,cARH,EASC,cAAC,QAAD,eACME,KADN;AAEC,IAAA,YAAY,EAAGH,YAFhB;AAGC,IAAA,cAAc,EAAGE,KAAK,CAACM;AAHxB,KATD,EAcGX,QAdH,CAHD,CADD;AAsBA;;AAED,eAAepB,cAAc,CAAES,gBAAF,EAAoB,kBAApB,CAA7B","sourcesContent":["/**\n * External dependencies\n */\n// eslint-disable-next-line no-restricted-imports\nimport { RadioGroup, useRadioState } from 'reakit';\nimport useResizeAware from 'react-resize-aware';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { useRef, useMemo } from '@wordpress/element';\nimport { useMergeRefs } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport {\n\tcontextConnect,\n\tuseContextSystem,\n\tPolymorphicComponentProps,\n} from '../ui/context';\nimport { View } from '../view';\nimport * as styles from './styles';\nimport { useUpdateEffect, useCx } from '../utils/hooks';\nimport Backdrop from './segmented-control-backdrop';\nimport type { SegmentedControlProps } from './types';\nimport SegmentedControlContext from './segmented-control-context';\n\nconst noop = () => {};\n\nfunction SegmentedControl(\n\tprops: PolymorphicComponentProps< SegmentedControlProps, 'input' >,\n\tforwardedRef: import('react').Ref< any >\n) {\n\tconst {\n\t\tclassName,\n\t\tbaseId,\n\t\tisAdaptiveWidth = false,\n\t\tisBlock = false,\n\t\tid,\n\t\tlabel,\n\t\tonChange = noop,\n\t\tvalue,\n\t\tchildren,\n\t\t...otherProps\n\t} = useContextSystem( props, 'SegmentedControl' );\n\tconst cx = useCx();\n\tconst containerRef = useRef();\n\tconst [ resizeListener, sizes ] = useResizeAware();\n\n\tconst radio = useRadioState( {\n\t\tbaseId: baseId || id,\n\t\tstate: value,\n\t} );\n\n\t// Propagate radio.state change\n\tuseUpdateEffect( () => {\n\t\tonChange( radio.state );\n\t}, [ radio.state ] );\n\n\t// Sync incoming value with radio.state\n\tuseUpdateEffect( () => {\n\t\tif ( value !== radio.state ) {\n\t\t\tradio.setState( value );\n\t\t}\n\t}, [ value ] );\n\n\tconst classes = useMemo(\n\t\t() =>\n\t\t\tcx(\n\t\t\t\tstyles.SegmentedControl,\n\t\t\t\tisBlock && styles.block,\n\t\t\t\t'medium',\n\t\t\t\tclassName\n\t\t\t),\n\t\t[ className ]\n\t);\n\treturn (\n\t\t<SegmentedControlContext.Provider\n\t\t\tvalue={ { ...radio, isBlock: ! isAdaptiveWidth } }\n\t\t>\n\t\t\t<RadioGroup\n\t\t\t\t{ ...radio }\n\t\t\t\taria-label={ label }\n\t\t\t\tas={ View }\n\t\t\t\tclassName={ classes }\n\t\t\t\t{ ...otherProps }\n\t\t\t\tref={ useMergeRefs( [ containerRef, forwardedRef ] ) }\n\t\t\t>\n\t\t\t\t{ resizeListener }\n\t\t\t\t<Backdrop\n\t\t\t\t\t{ ...radio }\n\t\t\t\t\tcontainerRef={ containerRef }\n\t\t\t\t\tcontainerWidth={ sizes.width }\n\t\t\t\t/>\n\t\t\t\t{ children }\n\t\t\t</RadioGroup>\n\t\t</SegmentedControlContext.Provider>\n\t);\n}\n\nexport default contextConnect( SegmentedControl, 'SegmentedControl' );\n"]}