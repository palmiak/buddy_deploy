import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
import { RadioGroup, useRadioState } from 'reakit';
import useResizeAware from 'react-resize-aware';
/**
 * WordPress dependencies
 */

import { useRef, useMemo } from '@wordpress/element';
import { useMergeRefs } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import { contextConnect, useContextSystem } from '../ui/context';
import { View } from '../view';
import * as styles from './styles';
import { useUpdateEffect, useCx } from '../utils/hooks';
import Backdrop from './segmented-control-backdrop';
import SegmentedControlContext from './segmented-control-context';

const noop = () => {};

function SegmentedControl(props, forwardedRef) {
  const {
    className,
    baseId,
    isAdaptiveWidth = false,
    isBlock = false,
    id,
    label,
    onChange = noop,
    value,
    children,
    ...otherProps
  } = useContextSystem(props, 'SegmentedControl');
  const cx = useCx();
  const containerRef = useRef();
  const [resizeListener, sizes] = useResizeAware();
  const radio = useRadioState({
    baseId: baseId || id,
    state: value
  }); // Propagate radio.state change

  useUpdateEffect(() => {
    onChange(radio.state);
  }, [radio.state]); // Sync incoming value with radio.state

  useUpdateEffect(() => {
    if (value !== radio.state) {
      radio.setState(value);
    }
  }, [value]);
  const classes = useMemo(() => cx(styles.SegmentedControl, isBlock && styles.block, 'medium', className), [className]);
  return createElement(SegmentedControlContext.Provider, {
    value: { ...radio,
      isBlock: !isAdaptiveWidth
    }
  }, createElement(RadioGroup, _extends({}, radio, {
    "aria-label": label,
    as: View,
    className: classes
  }, otherProps, {
    ref: useMergeRefs([containerRef, forwardedRef])
  }), resizeListener, createElement(Backdrop, _extends({}, radio, {
    containerRef: containerRef,
    containerWidth: sizes.width
  })), children));
}

export default contextConnect(SegmentedControl, 'SegmentedControl');
//# sourceMappingURL=component.js.map