import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { check, moreHorizontal } from '@wordpress/icons';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import DropdownMenu from '../../dropdown-menu';
import MenuGroup from '../../menu-group';
import MenuItem from '../../menu-item';
import { useToolsPanelHeader } from './hook';
import { contextConnect } from '../../ui/context';

const ToolsPanelHeader = (props, forwardedRef) => {
  const {
    hasMenuItems,
    header,
    menuItems,
    menuLabel,
    resetAll,
    toggleItem,
    ...headerProps
  } = useToolsPanelHeader(props);

  if (!header) {
    return null;
  }

  return createElement("h2", _extends({}, headerProps, {
    ref: forwardedRef
  }), header, hasMenuItems && createElement(DropdownMenu, {
    icon: moreHorizontal,
    label: menuLabel
  }, ({
    onClose
  }) => createElement(Fragment, null, createElement(MenuGroup, {
    label: __('Display options')
  }, Object.entries(menuItems).map(([label, isSelected]) => {
    return createElement(MenuItem, {
      key: label,
      icon: isSelected && check,
      isSelected: isSelected,
      onClick: () => {
        toggleItem(label);
        onClose();
      },
      role: "menuitemcheckbox"
    }, label);
  })), createElement(MenuGroup, null, createElement(MenuItem, {
    onClick: () => {
      resetAll();
      onClose();
    }
  }, __('Reset all'))))));
};

const ConnectedToolsPanelHeader = contextConnect(ToolsPanelHeader, 'ToolsPanelHeader');
export default ConnectedToolsPanelHeader;
//# sourceMappingURL=component.js.map