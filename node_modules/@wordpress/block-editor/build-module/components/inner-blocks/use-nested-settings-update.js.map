{"version":3,"sources":["@wordpress/block-editor/src/components/inner-blocks/use-nested-settings-update.js"],"names":["useLayoutEffect","useMemo","useSelect","useDispatch","isShallowEqual","store","blockEditorStore","getLayoutType","useNestedSettingsUpdate","clientId","allowedBlocks","templateLock","captureToolbars","orientation","layout","updateBlockListSettings","blockListSettings","parentLock","select","rootClientId","getBlockRootClientId","getBlockListSettings","getTemplateLock","_allowedBlocks","newSettings","undefined","__experimentalCaptureToolbars","layoutType","type","getOrientation"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAT,EAA0BC,OAA1B,QAAyC,oBAAzC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,iBAAvC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA;AACA;AACA;;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,aAA1C;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,uBAAT,CACdC,QADc,EAEdC,aAFc,EAGdC,YAHc,EAIdC,eAJc,EAKdC,WALc,EAMdC,MANc,EAOb;AACD,QAAM;AAAEC,IAAAA;AAAF,MAA8BZ,WAAW,CAAEG,gBAAF,CAA/C;AAEA,QAAM;AAAEU,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAAoCf,SAAS,CAChDgB,MAAF,IAAc;AACb,UAAMC,YAAY,GAAGD,MAAM,CAC1BZ,gBAD0B,CAAN,CAEnBc,oBAFmB,CAEGX,QAFH,CAArB;AAGA,WAAO;AACNO,MAAAA,iBAAiB,EAAEE,MAAM,CACxBZ,gBADwB,CAAN,CAEjBe,oBAFiB,CAEKZ,QAFL,CADb;AAINQ,MAAAA,UAAU,EAAEC,MAAM,CAAEZ,gBAAF,CAAN,CAA2BgB,eAA3B,CACXH,YADW;AAJN,KAAP;AAQA,GAbiD,EAclD,CAAEV,QAAF,CAdkD,CAAnD,CAHC,CAoBD;AACA;;AACA,QAAMc,cAAc,GAAGtB,OAAO,CAAE,MAAMS,aAAR,EAAuBA,aAAvB,CAA9B;;AAEAV,EAAAA,eAAe,CAAE,MAAM;AACtB,UAAMwB,WAAW,GAAG;AACnBd,MAAAA,aAAa,EAAEa,cADI;AAEnBZ,MAAAA,YAAY,EACXA,YAAY,KAAKc,SAAjB,GAA6BR,UAA7B,GAA0CN;AAHxB,KAApB,CADsB,CAOtB;AACA;;AACA,QAAKC,eAAe,KAAKa,SAAzB,EAAqC;AACpCD,MAAAA,WAAW,CAACE,6BAAZ,GAA4Cd,eAA5C;AACA,KAXqB,CAatB;AACA;;;AACA,QAAKC,WAAW,KAAKY,SAArB,EAAiC;AAChCD,MAAAA,WAAW,CAACX,WAAZ,GAA0BA,WAA1B;AACA,KAFD,MAEO;AACN,YAAMc,UAAU,GAAGpB,aAAa,CAAEO,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEc,IAAV,CAAhC;AACAJ,MAAAA,WAAW,CAACX,WAAZ,GAA0Bc,UAAU,CAACE,cAAX,CAA2Bf,MAA3B,CAA1B;AACA;;AAED,QAAK,CAAEV,cAAc,CAAEY,iBAAF,EAAqBQ,WAArB,CAArB,EAA0D;AACzDT,MAAAA,uBAAuB,CAAEN,QAAF,EAAYe,WAAZ,CAAvB;AACA;AACD,GAzBc,EAyBZ,CACFf,QADE,EAEFO,iBAFE,EAGFO,cAHE,EAIFZ,YAJE,EAKFM,UALE,EAMFL,eANE,EAOFC,WAPE,EAQFE,uBARE,EASFD,MATE,CAzBY,CAAf;AAoCA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useLayoutEffect, useMemo } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport { getLayoutType } from '../../layouts';\n\n/**\n * This hook is a side effect which updates the block-editor store when changes\n * happen to inner block settings. The given props are transformed into a\n * settings object, and if that is different from the current settings object in\n * the block-editor store, then the store is updated with the new settings which\n * came from props.\n *\n * @param {string}   clientId        The client ID of the block to update.\n * @param {string[]} allowedBlocks   An array of block names which are permitted\n *                                   in inner blocks.\n * @param {string}   [templateLock]  The template lock specified for the inner\n *                                   blocks component. (e.g. \"all\")\n * @param {boolean}  captureToolbars Whether or children toolbars should be shown\n *                                   in the inner blocks component rather than on\n *                                   the child block.\n * @param {string}   orientation     The direction in which the block\n *                                   should face.\n * @param {Object}   layout          The layout object for the block container.\n */\nexport default function useNestedSettingsUpdate(\n\tclientId,\n\tallowedBlocks,\n\ttemplateLock,\n\tcaptureToolbars,\n\torientation,\n\tlayout\n) {\n\tconst { updateBlockListSettings } = useDispatch( blockEditorStore );\n\n\tconst { blockListSettings, parentLock } = useSelect(\n\t\t( select ) => {\n\t\t\tconst rootClientId = select(\n\t\t\t\tblockEditorStore\n\t\t\t).getBlockRootClientId( clientId );\n\t\t\treturn {\n\t\t\t\tblockListSettings: select(\n\t\t\t\t\tblockEditorStore\n\t\t\t\t).getBlockListSettings( clientId ),\n\t\t\t\tparentLock: select( blockEditorStore ).getTemplateLock(\n\t\t\t\t\trootClientId\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\t// Memoize as inner blocks implementors often pass a new array on every\n\t// render.\n\tconst _allowedBlocks = useMemo( () => allowedBlocks, allowedBlocks );\n\n\tuseLayoutEffect( () => {\n\t\tconst newSettings = {\n\t\t\tallowedBlocks: _allowedBlocks,\n\t\t\ttemplateLock:\n\t\t\t\ttemplateLock === undefined ? parentLock : templateLock,\n\t\t};\n\n\t\t// These values are not defined for RN, so only include them if they\n\t\t// are defined.\n\t\tif ( captureToolbars !== undefined ) {\n\t\t\tnewSettings.__experimentalCaptureToolbars = captureToolbars;\n\t\t}\n\n\t\t// Orientation depends on layout,\n\t\t// ideally the separate orientation prop should be deprecated.\n\t\tif ( orientation !== undefined ) {\n\t\t\tnewSettings.orientation = orientation;\n\t\t} else {\n\t\t\tconst layoutType = getLayoutType( layout?.type );\n\t\t\tnewSettings.orientation = layoutType.getOrientation( layout );\n\t\t}\n\n\t\tif ( ! isShallowEqual( blockListSettings, newSettings ) ) {\n\t\t\tupdateBlockListSettings( clientId, newSettings );\n\t\t}\n\t}, [\n\t\tclientId,\n\t\tblockListSettings,\n\t\t_allowedBlocks,\n\t\ttemplateLock,\n\t\tparentLock,\n\t\tcaptureToolbars,\n\t\torientation,\n\t\tupdateBlockListSettings,\n\t\tlayout,\n\t] );\n}\n"]}