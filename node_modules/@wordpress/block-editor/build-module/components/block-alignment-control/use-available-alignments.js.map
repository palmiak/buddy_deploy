{"version":3,"sources":["@wordpress/block-editor/src/components/block-alignment-control/use-available-alignments.js"],"names":["useSelect","useLayout","store","blockEditorStore","getLayoutType","DEFAULT_CONTROLS","WIDE_CONTROLS","useAvailableAlignments","controls","wideControlsEnabled","themeSupportsLayout","select","getSettings","settings","alignWide","supportsLayout","layout","layoutType","type","layoutAlignments","getAlignments","filter","control","includes","name","alignments","availableAlignments","enabledControls"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,iBAA1B;AAEA;AACA;AACA;;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,aAA1C;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA,MAAMC,gBAAgB,GAAG,CAAE,MAAF,EAAU,QAAV,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,MAArC,CAAzB;AACA,MAAMC,aAAa,GAAG,CAAE,MAAF,EAAU,MAAV,CAAtB;AAEA,eAAe,SAASC,sBAAT,CAAiCC,QAAQ,GAAGH,gBAA5C,EAA+D;AAC7E,QAAM;AAAEI,IAAAA,mBAAmB,GAAG,KAAxB;AAA+BC,IAAAA;AAA/B,MAAuDV,SAAS,CACnEW,MAAF,IAAc;AACb,UAAM;AAAEC,MAAAA;AAAF,QAAkBD,MAAM,CAAER,gBAAF,CAA9B;AACA,UAAMU,QAAQ,GAAGD,WAAW,EAA5B;AACA,WAAO;AACNH,MAAAA,mBAAmB,EAAEI,QAAQ,CAACC,SADxB;AAENJ,MAAAA,mBAAmB,EAAEG,QAAQ,CAACE;AAFxB,KAAP;AAIA,GARoE,EASrE,EATqE,CAAtE;AAWA,QAAMC,MAAM,GAAGf,SAAS,EAAxB;AACA,QAAMgB,UAAU,GAAGb,aAAa,CAAEY,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEE,IAAV,CAAhC;AACA,QAAMC,gBAAgB,GAAGF,UAAU,CAACG,aAAX,CAA0BJ,MAA1B,CAAzB;;AAEA,MAAKN,mBAAL,EAA2B;AAC1B,WAAOS,gBAAgB,CAACE,MAAjB,CAA2BC,OAAF,IAC/Bd,QAAQ,CAACe,QAAT,CAAmBD,OAAnB,CADM,CAAP;AAGA,GApB4E,CAsB7E;;;AACA,MAAKL,UAAU,CAACO,IAAX,KAAoB,SAAzB,EAAqC;AACpC,WAAO,EAAP;AACA;;AACD,QAAM;AAAEC,IAAAA,UAAU,EAAEC,mBAAmB,GAAGrB;AAApC,MAAyDW,MAA/D;AACA,QAAMW,eAAe,GAAGnB,QAAQ,CAACa,MAAT,CACrBC,OAAF,IACC,CAAEN,MAAM,CAACS,UAAP,IAAqB;AACtBhB,EAAAA,mBADC,IAED,CAAEH,aAAa,CAACiB,QAAd,CAAwBD,OAAxB,CAFH,KAGAI,mBAAmB,CAACH,QAApB,CAA8BD,OAA9B,CALsB,CAAxB;AAQA,SAAOK,eAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { useLayout } from '../block-list/layout';\nimport { store as blockEditorStore } from '../../store';\nimport { getLayoutType } from '../../layouts';\n\nconst DEFAULT_CONTROLS = [ 'left', 'center', 'right', 'wide', 'full' ];\nconst WIDE_CONTROLS = [ 'wide', 'full' ];\n\nexport default function useAvailableAlignments( controls = DEFAULT_CONTROLS ) {\n\tconst { wideControlsEnabled = false, themeSupportsLayout } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getSettings } = select( blockEditorStore );\n\t\t\tconst settings = getSettings();\n\t\t\treturn {\n\t\t\t\twideControlsEnabled: settings.alignWide,\n\t\t\t\tthemeSupportsLayout: settings.supportsLayout,\n\t\t\t};\n\t\t},\n\t\t[]\n\t);\n\tconst layout = useLayout();\n\tconst layoutType = getLayoutType( layout?.type );\n\tconst layoutAlignments = layoutType.getAlignments( layout );\n\n\tif ( themeSupportsLayout ) {\n\t\treturn layoutAlignments.filter( ( control ) =>\n\t\t\tcontrols.includes( control )\n\t\t);\n\t}\n\n\t// Starting here, it's the fallback for themes not supporting the layout config.\n\tif ( layoutType.name !== 'default' ) {\n\t\treturn [];\n\t}\n\tconst { alignments: availableAlignments = DEFAULT_CONTROLS } = layout;\n\tconst enabledControls = controls.filter(\n\t\t( control ) =>\n\t\t\t( layout.alignments || // Ignore the global wideAlignment check if the layout explicitely defines alignments.\n\t\t\t\twideControlsEnabled ||\n\t\t\t\t! WIDE_CONTROLS.includes( control ) ) &&\n\t\t\tavailableAlignments.includes( control )\n\t);\n\n\treturn enabledControls;\n}\n"]}