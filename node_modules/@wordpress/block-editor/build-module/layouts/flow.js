import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { Button, __experimentalUseCustomUnits as useCustomUnits, __experimentalUnitControl as UnitControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { Icon, positionCenter, stretchWide } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import useSetting from '../components/use-setting';
import { appendSelectors } from './utils';
export default {
  name: 'default',
  label: __('Flow'),
  edit: function LayoutDefaultEdit({
    layout,
    onChange
  }) {
    const {
      wideSize,
      contentSize
    } = layout;
    const units = useCustomUnits({
      availableUnits: useSetting('spacing.units') || ['%', 'px', 'em', 'rem', 'vw']
    });
    return createElement(Fragment, null, createElement("div", {
      className: "block-editor-hooks__layout-controls"
    }, createElement("div", {
      className: "block-editor-hooks__layout-controls-unit"
    }, createElement(UnitControl, {
      label: __('Content'),
      labelPosition: "top",
      __unstableInputWidth: "80px",
      value: contentSize || wideSize || '',
      onChange: nextWidth => {
        nextWidth = 0 > parseFloat(nextWidth) ? '0' : nextWidth;
        onChange({ ...layout,
          contentSize: nextWidth
        });
      },
      units: units
    }), createElement(Icon, {
      icon: positionCenter
    })), createElement("div", {
      className: "block-editor-hooks__layout-controls-unit"
    }, createElement(UnitControl, {
      label: __('Wide'),
      labelPosition: "top",
      __unstableInputWidth: "80px",
      value: wideSize || contentSize || '',
      onChange: nextWidth => {
        nextWidth = 0 > parseFloat(nextWidth) ? '0' : nextWidth;
        onChange({ ...layout,
          wideSize: nextWidth
        });
      },
      units: units
    }), createElement(Icon, {
      icon: stretchWide
    }))), createElement("div", {
      className: "block-editor-hooks__layout-controls-reset"
    }, createElement(Button, {
      variant: "secondary",
      isSmall: true,
      disabled: !contentSize && !wideSize,
      onClick: () => onChange({
        contentSize: undefined,
        wideSize: undefined,
        inherit: false
      })
    }, __('Reset'))), createElement("p", {
      className: "block-editor-hooks__layout-controls-helptext"
    }, __('Customize the width for all elements that are assigned to the center or wide columns.')));
  },
  save: function DefaultLayoutStyle({
    selector,
    layout = {}
  }) {
    const {
      contentSize,
      wideSize
    } = layout;
    let style = !!contentSize || !!wideSize ? `
					${appendSelectors(selector, '> *')} {
						max-width: ${contentSize !== null && contentSize !== void 0 ? contentSize : wideSize};
						margin-left: auto !important;
						margin-right: auto !important;
					}
	
					${appendSelectors(selector, '> [data-align="wide"]')}  {
						max-width: ${wideSize !== null && wideSize !== void 0 ? wideSize : contentSize};
					}
	
					${appendSelectors(selector, '> [data-align="full"]')} {
						max-width: none;
					}
				` : '';
    style += `
			${appendSelectors(selector, '> [data-align="left"]')} {
				float: left;
				margin-right: 2em;
			}
	
			${appendSelectors(selector, '> [data-align="right"]')} {
				float: right;
				margin-left: 2em;
			}
		`;
    return createElement("style", null, style);
  },

  getOrientation() {
    return 'vertical';
  },

  getAlignments(layout) {
    if (layout.alignments !== undefined) {
      return layout.alignments;
    }

    return layout.contentSize || layout.wideSize ? ['wide', 'full', 'left', 'center', 'right'] : ['left', 'center', 'right'];
  }

};
//# sourceMappingURL=flow.js.map