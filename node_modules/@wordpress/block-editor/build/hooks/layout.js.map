{"version":3,"sources":["@wordpress/block-editor/src/hooks/layout.js"],"names":["layoutBlockSupportKey","canBlockSwitchLayout","blockTypeOrName","layoutBlockSupportConfig","allowSwitching","LayoutPanel","setAttributes","attributes","name","blockName","layout","defaultLayout","themeSupportsLayout","select","getSettings","blockEditorStore","supportsLayout","allowLayoutSwitching","inherit","type","layoutType","onChangeType","newType","onChangeLayout","newLayout","LayoutTypeSwitcher","onChange","map","label","addAttribute","settings","withInspectorControls","BlockEdit","props","supportLayout","withLayoutStyles","BlockListBlock","id","usedLayout","className","element","Head","context"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { has } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createHigherOrderComponent, useInstanceId } from '@wordpress/compose';\nimport { addFilter } from '@wordpress/hooks';\nimport { getBlockSupport, hasBlockSupport } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\nimport {\n\tButton,\n\tButtonGroup,\n\tToggleControl,\n\tPanelBody,\n} from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { useContext, createPortal } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../store';\nimport { InspectorControls } from '../components';\nimport useSetting from '../components/use-setting';\nimport { LayoutStyle } from '../components/block-list/layout';\nimport { Head } from '../components/block-list/head';\nimport { getLayoutType, getLayoutTypes } from '../layouts';\n\nconst layoutBlockSupportKey = '__experimentalLayout';\n\nconst canBlockSwitchLayout = ( blockTypeOrName ) => {\n\tconst layoutBlockSupportConfig = getBlockSupport(\n\t\tblockTypeOrName,\n\t\tlayoutBlockSupportKey\n\t);\n\n\treturn layoutBlockSupportConfig?.allowSwitching;\n};\n\nfunction LayoutPanel( { setAttributes, attributes, name: blockName } ) {\n\tconst { layout = {} } = attributes;\n\tconst defaultLayout = useSetting( 'layout' );\n\tconst themeSupportsLayout = useSelect( ( select ) => {\n\t\tconst { getSettings } = select( blockEditorStore );\n\t\treturn getSettings().supportsLayout;\n\t}, [] );\n\n\tif ( ! themeSupportsLayout ) {\n\t\treturn null;\n\t}\n\n\tconst allowLayoutSwitching = canBlockSwitchLayout( blockName );\n\tconst { inherit = false, type = 'default' } = layout;\n\tconst layoutType = getLayoutType( type );\n\n\tconst onChangeType = ( newType ) =>\n\t\tsetAttributes( { layout: { type: newType } } );\n\tconst onChangeLayout = ( newLayout ) =>\n\t\tsetAttributes( { layout: newLayout } );\n\n\treturn (\n\t\t<InspectorControls>\n\t\t\t<PanelBody title={ __( 'Layout' ) }>\n\t\t\t\t{ !! defaultLayout && (\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tlabel={ __( 'Inherit default layout' ) }\n\t\t\t\t\t\tchecked={ !! inherit }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( { layout: { inherit: ! inherit } } )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ ! inherit && allowLayoutSwitching && (\n\t\t\t\t\t<LayoutTypeSwitcher\n\t\t\t\t\t\ttype={ type }\n\t\t\t\t\t\tonChange={ onChangeType }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ ! inherit && layoutType && (\n\t\t\t\t\t<layoutType.edit\n\t\t\t\t\t\tlayout={ layout }\n\t\t\t\t\t\tonChange={ onChangeLayout }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</PanelBody>\n\t\t</InspectorControls>\n\t);\n}\n\nfunction LayoutTypeSwitcher( { type, onChange } ) {\n\treturn (\n\t\t<ButtonGroup>\n\t\t\t{ getLayoutTypes().map( ( { name, label } ) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey={ name }\n\t\t\t\t\t\tisPressed={ type === name }\n\t\t\t\t\t\tonClick={ () => onChange( name ) }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ label }\n\t\t\t\t\t</Button>\n\t\t\t\t);\n\t\t\t} ) }\n\t\t</ButtonGroup>\n\t);\n}\n\n/**\n * Filters registered block settings, extending attributes to include `layout`.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nexport function addAttribute( settings ) {\n\tif ( has( settings.attributes, [ 'layout', 'type' ] ) ) {\n\t\treturn settings;\n\t}\n\tif ( hasBlockSupport( settings, layoutBlockSupportKey ) ) {\n\t\tsettings.attributes = {\n\t\t\t...settings.attributes,\n\t\t\tlayout: {\n\t\t\t\ttype: 'object',\n\t\t\t},\n\t\t};\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override the default edit UI to include layout controls\n *\n * @param {Function} BlockEdit Original component.\n *\n * @return {Function} Wrapped component.\n */\nexport const withInspectorControls = createHigherOrderComponent(\n\t( BlockEdit ) => ( props ) => {\n\t\tconst { name: blockName } = props;\n\t\tconst supportLayout = hasBlockSupport(\n\t\t\tblockName,\n\t\t\tlayoutBlockSupportKey\n\t\t);\n\n\t\treturn [\n\t\t\tsupportLayout && <LayoutPanel key=\"layout\" { ...props } />,\n\t\t\t<BlockEdit key=\"edit\" { ...props } />,\n\t\t];\n\t},\n\t'withInspectorControls'\n);\n\n/**\n * Override the default block element to add the layout styles.\n *\n * @param {Function} BlockListBlock Original component.\n *\n * @return {Function} Wrapped component.\n */\nexport const withLayoutStyles = createHigherOrderComponent(\n\t( BlockListBlock ) => ( props ) => {\n\t\tconst { name, attributes } = props;\n\t\tconst supportLayout = hasBlockSupport( name, layoutBlockSupportKey );\n\t\tconst id = useInstanceId( BlockListBlock );\n\t\tconst defaultLayout = useSetting( 'layout' ) || {};\n\t\tif ( ! supportLayout ) {\n\t\t\treturn <BlockListBlock { ...props } />;\n\t\t}\n\t\tconst { layout = {} } = attributes;\n\t\tconst usedLayout = !! layout && layout.inherit ? defaultLayout : layout;\n\t\tconst className = classnames(\n\t\t\tprops?.className,\n\t\t\t`wp-container-${ id }`\n\t\t);\n\n\t\tconst element = useContext( Head.context );\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{ element &&\n\t\t\t\t\tcreatePortal(\n\t\t\t\t\t\t<LayoutStyle\n\t\t\t\t\t\t\tselector={ `.wp-container-${ id }` }\n\t\t\t\t\t\t\tlayout={ usedLayout }\n\t\t\t\t\t\t/>,\n\t\t\t\t\t\telement\n\t\t\t\t\t) }\n\t\t\t\t<BlockListBlock { ...props } className={ className } />\n\t\t\t</>\n\t\t);\n\t}\n);\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/layout/addAttribute',\n\taddAttribute\n);\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/editor/layout/with-layout-styles',\n\twithLayoutStyles\n);\naddFilter(\n\t'editor.BlockEdit',\n\t'core/editor/layout/with-inspector-controls',\n\twithInspectorControls\n);\n"]}