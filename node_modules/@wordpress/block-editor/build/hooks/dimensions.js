"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DimensionsPanel = DimensionsPanel;
exports.hasDimensionsSupport = hasDimensionsSupport;
exports.useCustomSides = useCustomSides;
exports.SPACING_SUPPORT_KEY = void 0;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _inspectorControls = _interopRequireDefault(require("../components/inspector-controls"));

var _margin = require("./margin");

var _padding = require("./padding");

var _utils = require("./utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const SPACING_SUPPORT_KEY = 'spacing';
/**
 * Inspector controls for dimensions support.
 *
 * @param {Object} props Block props.
 *
 * @return {WPElement} Inspector controls for spacing support features.
 */

exports.SPACING_SUPPORT_KEY = SPACING_SUPPORT_KEY;

function DimensionsPanel(props) {
  const isPaddingDisabled = (0, _padding.useIsPaddingDisabled)(props);
  const isMarginDisabled = (0, _margin.useIsMarginDisabled)(props);
  const isDisabled = useIsDimensionsDisabled(props);
  const isSupported = hasDimensionsSupport(props.name);

  if (isDisabled || !isSupported) {
    return null;
  }

  const defaultSpacingControls = (0, _blocks.getBlockSupport)(props.name, [SPACING_SUPPORT_KEY, '__experimentalDefaultControls']); // Callback to reset all block support attributes controlled via this panel.

  const resetAll = () => {
    const {
      style
    } = props.attributes;
    props.setAttributes({
      style: (0, _utils.cleanEmptyObject)({ ...style,
        spacing: { ...(style === null || style === void 0 ? void 0 : style.spacing),
          margin: undefined,
          padding: undefined
        }
      })
    });
  };

  return (0, _element.createElement)(_inspectorControls.default, {
    key: "dimensions"
  }, (0, _element.createElement)(_components.__experimentalToolsPanel, {
    label: (0, _i18n.__)('Dimensions options'),
    header: (0, _i18n.__)('Dimensions'),
    resetAll: resetAll
  }, !isPaddingDisabled && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    hasValue: () => (0, _padding.hasPaddingValue)(props),
    label: (0, _i18n.__)('Padding'),
    onDeselect: () => (0, _padding.resetPadding)(props),
    isShownByDefault: defaultSpacingControls === null || defaultSpacingControls === void 0 ? void 0 : defaultSpacingControls.padding
  }, (0, _element.createElement)(_padding.PaddingEdit, props)), !isMarginDisabled && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    hasValue: () => (0, _margin.hasMarginValue)(props),
    label: (0, _i18n.__)('Margin'),
    onDeselect: () => (0, _margin.resetMargin)(props),
    isShownByDefault: defaultSpacingControls === null || defaultSpacingControls === void 0 ? void 0 : defaultSpacingControls.margin
  }, (0, _element.createElement)(_margin.MarginEdit, props))));
}
/**
 * Determine whether there is dimensions related block support.
 *
 * @param {string} blockName Block name.
 *
 * @return {boolean} Whether there is support.
 */


function hasDimensionsSupport(blockName) {
  if (_element.Platform.OS !== 'web') {
    return false;
  }

  return (0, _padding.hasPaddingSupport)(blockName) || (0, _margin.hasMarginSupport)(blockName);
}
/**
 * Determines whether dimensions support has been disabled.
 *
 * @param {Object} props Block properties.
 *
 * @return {boolean} If spacing support is completely disabled.
 */


const useIsDimensionsDisabled = (props = {}) => {
  const paddingDisabled = (0, _padding.useIsPaddingDisabled)(props);
  const marginDisabled = (0, _margin.useIsMarginDisabled)(props);
  return paddingDisabled && marginDisabled;
};
/**
 * Custom hook to retrieve which padding/margin is supported
 * e.g. top, right, bottom or left.
 *
 * Sides are opted into by default. It is only if a specific side is set to
 * false that it is omitted.
 *
 * @param {string} blockName Block name.
 * @param {string} feature   The feature custom sides relate to e.g. padding or margins.
 *
 * @return {Object} Sides supporting custom margin.
 */


function useCustomSides(blockName, feature) {
  const support = (0, _blocks.getBlockSupport)(blockName, SPACING_SUPPORT_KEY); // Skip when setting is boolean as theme isn't setting arbitrary sides.

  if (typeof support[feature] === 'boolean') {
    return;
  }

  return support[feature];
}
//# sourceMappingURL=dimensions.js.map